{"version":3,"sources":["vector.ts","util.ts","body.ts","shapes.ts","collision_circle_circle.ts","collision_circle_polygon.ts","collision_polygon_polygon.ts","collisions.ts","sketch.ts","../node_modules/parcel-bundler/src/builtins/hmr-runtime.js"],"names":["OVERLAY_ID","OldModule","module","bundle","Module","moduleName","call","hot","data","hotData","_acceptCallbacks","_disposeCallbacks","accept","fn","push","dispose","checkedAssets","assetsToAccept","parent","isParcelRequire","WebSocket","hostname","location","protocol","ws","onmessage","event","JSON","parse","type","handled","assets","forEach","asset","isNew","didAccept","hmrAcceptCheck","global","parcelRequire","id","every","generated","js","console","clear","hmrApply","v","hmrAcceptRun","window","reload","close","onclose","log","removeErrorOverlay","error","message","stack","overlay","createErrorOverlay","document","body","appendChild","getElementById","remove","createElement","stackTrace","innerText","innerHTML","getParents","modules","parents","k","d","dep","Array","isArray","length","concat","Function","deps","cached","cache","some","cb"],"mappings":"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","file":"sketch.3938edfb.js","sourceRoot":"../src","sourcesContent":["let sqrt = Math.sqrt\r\nlet sq = (x: number) => x * x\r\nlet cos = Math.cos\r\nlet sin = Math.sin\r\n\r\nexport class Vector {\r\n  x: number\r\n  y: number\r\n  \r\n  constructor(x?: number, y?: number) {\r\n    x = (x == undefined) ? 0 : x\r\n    y = (y == undefined) ? 0 : y\r\n    \r\n    if (!isFinite(x) || !isFinite(y)) {\r\n      let error = new VectorError(\"x and y must be numbers, was (\" + x + \", \" + y + \")\")\r\n      \r\n      console.log(error.stack)\r\n      \r\n      throw error\r\n    }\r\n    \r\n    this.x = x\r\n    this.y = y\r\n  }\r\n  \r\n  length() {\r\n      return sqrt(sq(this.x) + sq(this.y));\r\n  }\r\n  \r\n  lengthSquared() {\r\n    return sq(this.x) + sq(this.y)\r\n  }\r\n  \r\n  neg() {\r\n    return new Vector(-this.x, -this.y)\r\n  }\r\n  \r\n  toString() {\r\n    return \"[\" + this.x + \", \" + this.y + \"]\"\r\n  }\r\n  \r\n  unit() {\r\n    return this.div(this.length())\r\n  }\r\n  \r\n  add(other: Vector) {\r\n    return new Vector(this.x + other.x, this.y + other.y)\r\n  }\r\n  \r\n  sub(other: Vector) {\r\n    return new Vector(this.x - other.x, this.y - other.y)\r\n  }\r\n  \r\n  mult(value: number) {\r\n    if (!isFinite(value)) {\r\n      throw new VectorError(\"value must be finite, was \" + value)\r\n    }\r\n    \r\n    return new Vector(this.x * value, this.y * value)\r\n  }\r\n  \r\n  div(value: number) {\r\n    return new Vector(this.x / value, this.y / value)\r\n  }\r\n  \r\n  dot(other: Vector) {\r\n    return this.x * other.x + this.y * other.y\r\n  }\r\n  \r\n  cross(other: Vector) {\r\n    return this.x * other.y - this.y * other.x\r\n  }\r\n  \r\n  crossScalar(s: number) {\r\n    return new Vector(s * this.y, -s * this.x)\r\n  }\r\n  \r\n  scalarCross(s: number) {\r\n    return new Vector(-s * this.y, s * this.x)\r\n  }\r\n  \r\n  rotate(theta: number) {\r\n    return new Vector(this.x * cos(theta) - this.y * sin(theta), this.x * sin(theta) + this.y * cos(theta))\r\n  }\r\n  \r\n  equals(other: Vector) {\r\n    return this.x == other.x && this.y == other.y\r\n  }\r\n}\r\n\r\nclass VectorError extends Error {}","export function clamp(minimum: number, maximum: number, value: number) {\n  return Math.min(Math.max(minimum, value), maximum)\n}\n\nlet lastId = 0\n\nexport function unqiueId() {\n  const id = lastId\n  lastId++\n  return id\n}","import { Vector } from \"./vector\"\nimport { Shape } from \"./shapes\"\nimport { unqiueId } from \"./util\"\nimport p5 = require(\"p5\");\n\nexport class Body {\n  id: number\n  position: Vector\n  velocity: Vector\n  force: Vector\n\n  orientation: number\n  angularVelocity: number\n  torque: number\n\n  shape: Shape\n  restitution: number\n\n  mass: number = 0\n  invMass: number = 0\n  inertia: number = 0\n  invInertia: number = 0\n\n  constructor(shape: Shape, density?: number) {\n    this.id = unqiueId()\n    \n    this.position = new Vector()\n    this.velocity = new Vector()\n    this.force = new Vector()\n    \n    this.orientation = 0\n    this.angularVelocity = 0\n    this.torque = 0\n    \n    this.shape = shape\n    this.shape.computeMass(this, (density == undefined) ? 0.1 : density)\n    \n    this.restitution = 0.7\n  }\n  \n  applyForce(force: Vector) {\n    this.force = this.force.add(force)\n  }\n  \n  applyImpulse(impulse: Vector, contactVector: Vector) {\n    this.velocity = this.velocity.add(impulse.mult(this.invMass))\n    this.angularVelocity += this.invInertia * contactVector.cross(impulse)\n  }\n  \n  isPointInside(point: Vector) {\n    let bodyPoint = point.sub(this.position).rotate(-this.orientation)\n    return this.shape.isInside(bodyPoint)\n  }\n\n  update(dt: number) {\n    this.velocity = this.velocity.add(this.force.mult(this.invMass).mult(dt))\n    this.position = this.position.add(this.velocity.mult(dt))\n    this.force = new Vector()\n    \n    this.angularVelocity = this.torque * this.invInertia * dt\n    this.orientation += this.angularVelocity * dt\n    this.torque = 0\n  }\n\n  draw(p: p5) {\n    p.push()\n    p.noFill()\n    p.stroke(0)\n    \n    p.translate(this.position.x, this.position.y)\n    p.rotate(this.orientation)\n      \n    this.shape.draw(p)\n    \n    p.pop()\n  }\n}","import { Vector } from \"./vector\"\nimport { Body } from \"./body\"\nimport p5 = require(\"p5\");\n\nconst sq = (x: number) => x * x\nconst PI = Math.PI\n\nexport const SHAPE_AABB = 0\nexport const SHAPE_CIRCLE = 1\nexport const SHAPE_POLYGON = 2\nexport const SHAPE_COUNT = 3\n\nconst SHAPE_DEBUG = true\n\nexport interface Shape {\n  type: number\n\n  draw(p: p5): void\n  computeMass(body: Body, density: number): void\n  isInside(point: Vector): boolean\n}\n\nexport class AABB implements Shape {\n  type: number\n  size: Vector\n\n  constructor(size: Vector) {\n    this.type = SHAPE_AABB\n    this.size = size || new Vector(20, 20)\n  }\n\n  draw(p: p5) {\n    let min = this.size.div(2)\n    p.rect(min.x, min.y, this.size.x, this.size.y)\n  }\n\n  computeMass(body: Body, density: number) {\n    return this.size.x * this.size.y * density\n  }\n\n  isInside(point: Vector): boolean {\n    let halfWidth = this.size.x / 2\n    let halfHeight = this.size.y / 2\n    return point.x >= -halfWidth && point.x <= halfWidth && point.y >= -halfHeight && point.y <= halfHeight\n  }\n}\n\nexport class Circle implements Shape {\n  type: number\n  radius: number\n\n  constructor(radius: number) {\n    this.type = SHAPE_CIRCLE\n    this.radius = radius || 20\n  }\n\n  draw(p: p5) {\n    p.ellipse(0, 0, this.radius)\n    if (SHAPE_DEBUG) {\n      p.line(0, 0, this.radius, 0)\n    }\n  }\n  \n  computeMass(body: Body, density: number) {\n    body.mass = PI * sq(this.radius) * density\n    body.invMass = (body.mass != 0) ? 1 / body.mass : 0\n    body.inertia = body.mass * sq(this.radius)\n    body.invInertia = (body.inertia != 0) ? 1 / body.inertia : 0\n  }\n  \n  isInside(point: Vector) {\n    return point.length() <= this.radius\n  }\n}\n\n\nexport class Polygon implements Shape {\n  \n  static rect(w: number, h: number) {\n    const halfWidth = w / 2\n    const halfHeight = h / 2\n    return new Polygon([\n      new Vector(halfWidth, halfHeight),\n      new Vector(halfWidth, -halfHeight),\n      new Vector(-halfWidth, -halfHeight),\n      new Vector(-halfWidth, halfHeight)\n    ])\n  }\n\n  type: number\n  vertices: Vector[]\n  normals: Vector[]\n\n  constructor(verts: Vector[]) {\n    if (!Array.isArray(verts)) {\n      throw \"PolygonError: verts must be an array\"\n    }\n    if (verts.length < 3) {\n      throw \"PolygonError: verts must contain at least 3 vertices\"\n    }\n\n    this.type = SHAPE_POLYGON\n    this.vertices = verts\n\n    this.normals = []\n    for (let i = 0; i < this.vertexCount; i++) {\n      let face = this.vertices[(i + 1) % this.vertexCount].sub(this.vertices[i])\n      let normal = new Vector(-face.y, face.x).unit()\n      this.normals.push(normal)\n    }\n  }\n\n  get vertexCount(): number {\n    return this.vertices.length\n  }\n \n  computeMass(body: Body, density: number) {\n    let c = new Vector()\n    let area = 0\n    let I = 0\n    const inv3 = 1 / 3\n    \n    for (let i = 0; i < this.vertices.length; i++) {\n      let p1 = this.vertices[i]\n      let p2 = this.vertices[(i + 1) % this.vertices.length]\n      \n      let D = p2.cross(p1)\n      let triangleArea = 0.5 * D\n      \n      area += triangleArea\n      \n      let weight = triangleArea * inv3\n      let intx2 = sq(p1.x) + p1.x * p2.x + sq(p2.x)\n      let inty2 = sq(p1.y) + p1.y * p2.y + sq(p2.y)\n      I += (0.25 * inv3 * D) * (intx2 + inty2)\n    }\n    \n    body.mass = density * area\n    body.invMass = (body.mass != 0) ? 1 / body.mass : 0\n    body.inertia = I * density\n    body.invInertia = (body.inertia != 0) ? 1 / body.inertia : 0\n  }\n  \n  draw(p: p5) {\n    p.push()\n    p.beginShape()\n    for (let v of this.vertices) {\n      p.vertex(v.x, v.y)\n    }\n    p.endShape(p.CLOSE)\n\n    // for (let i = 0; i < this.vertexCount; i++) {\n    //   let vertex = this.vertices[i]\n    //   let faceHalf = vertex.add(this.vertices[(i + 1) % this.vertexCount].sub(this.vertices[i]).mult(0.5))\n    //   let normal = this.normals[i].mult(10)\n    //   // stroke(\"#FF0\")\n    //   // ellipse(faceHalf.x, faceHalf.y, 20)\n    //   stroke(\"#0F0\")\n    //   line(faceHalf.x, faceHalf.y, faceHalf.x + normal.x, faceHalf.y + normal.y)\n    //   fill(0)\n    //   textAlign(CENTER, CENTER)\n    //   text(i, faceHalf.x - normal.x, faceHalf.y - normal.y)\n\n    // }\n\n    p.pop()\n  }\n\n  getSupport(direction: Vector): Vector {\n    let bestProjection = -Number.MAX_VALUE\n    let bestVertex: Vector = this.vertices[0]\n\n    for (let i = 0; i < this.vertexCount; i++) {\n      let vertex = this.vertices[i]\n      let projection = vertex.dot(direction)\n\n      if (projection > bestProjection) {\n        bestVertex = vertex\n        bestProjection = projection\n      }\n    }\n\n    return bestVertex \n  }\n  \n  isInside(point: Vector) {\n    for (let i = 0; i < this.vertices.length; i++) {\n      let s = this.normals[i].dot(point.sub(this.vertices[i]))\n      if (s > 0) {\n        return false\n      }\n    }\n    \n    return true\n  }\n}","import { CollisionHandler } from \"./CollisionHandler\"\nimport { Manifold } from \"./collisions\"\nimport { Body } from \"./body\"\nimport { Circle } from \"./shapes\"\nimport { Vector } from \"./vector\";\n\nlet sq = (x: number) => x * x\nlet sqrt = Math.sqrt\n\nexport class CollisionCircleCircle implements CollisionHandler {\n  handleCollision(manifold: Manifold, a: Body, b: Body) {\n    let A = a.shape as Circle\n    let B = b.shape as Circle\n        \n    let normal = b.position.sub(a.position)\n    \n    let dist_sqr = normal.lengthSquared()\n    let radius = A.radius + B.radius\n    \n    if (dist_sqr >= sq(radius)) {\n      manifold.contactCount = 0\n      return\n    }\n      \n    let distance = sqrt(dist_sqr)\n    manifold.contactCount = 1\n    if (distance == 0.0) {\n      manifold.penetration = A.radius\n      manifold.normal = new Vector(1, 0)\n      manifold.contacts[0] = a.position\n    } else {\n      manifold.penetration = radius - distance\n      manifold.normal = normal.div(distance)\n      manifold.contacts[0] = manifold.normal.mult(A.radius).add(a.position)\n    }\n  }\n}","import { CollisionHandler } from \"./CollisionHandler\";\nimport { Manifold } from \"./collisions\";\nimport { Circle, Polygon } from \"./shapes\";\nimport { Body } from \"./body\"\n\nconst EPSILON = 0.0001\n\nlet sq = (x: number) => x * x\n\nexport class CollisionCirclePolygon implements CollisionHandler {\n  handleCollision(manifold: Manifold, circleBody: Body, polygonBody: Body) {\n    const circle = circleBody.shape as Circle\n    const polygon = polygonBody.shape as Polygon\n    \n    manifold.contactCount = 0\n\n    // Transform circle center into polygon space\n    let center = circleBody.position.sub(polygonBody.position).rotate(-polygonBody.orientation)\n\n    // Find edge with minimum penetration\n    // Exact concept as using support pointsin polygon vs polygon\n    let separation = -Number.MAX_VALUE\n    let faceNormal = 0\n    for (let i = 0; i < polygon.vertexCount; i++) {\n\n      let s = polygon.normals[i].dot(center.sub(polygon.vertices[i]))\n      if (s > circle.radius) {\n        return\n      }\n\n      if (s > separation) {\n        separation = s\n        faceNormal = i\n      }\n    }\n\n    // Grab face's vertices\n    let v1 = polygon.vertices[faceNormal]\n    let v2 = polygon.vertices[(faceNormal + 1) % polygon.vertexCount]\n\n    // Check to see if center is within polygon\n    if (separation < EPSILON) {\n      manifold.contactCount = 1\n      manifold.normal = polygon.normals[faceNormal].rotate(polygonBody.orientation).neg()\n      manifold.contacts[0] = manifold.normal.mult(circle.radius).add(circleBody.position)\n      manifold.penetration = circle.radius - separation\n      return\n    }\n\n    // Determine which voronoi region of the edge center of circle lies within\n    let dot1 = center.sub(v1).dot(v2.sub(v1))\n    let dot2 = center.sub(v2).dot(v1.sub(v2))\n    manifold.penetration = circle.radius - separation\n\n    if (dot1 <= 0.0) {\n\n      // Closest to v1\n      if (v1.sub(center).lengthSquared() > sq(circle.radius)) {\n        return\n      }\n\n      manifold.contactCount = 1\n      manifold.normal = v1.sub(center).rotate(polygonBody.orientation).unit()\n      manifold.contacts[0] = v1.rotate(polygonBody.orientation).add(polygonBody.position)\n    } else if (dot2 <= 0.0) {\n\n      // Closest to v2\n      if (v2.sub(center).lengthSquared() > sq(circle.radius)) {\n        return\n      }\n\n      manifold.contactCount = 1\n      manifold.normal = v2.sub(center).rotate(polygonBody.orientation).unit()\n      manifold.contacts[0] = v2.rotate(polygonBody.orientation).add(polygonBody.position)\n\n    } else {\n      // Closest to face\n      let n = polygon.normals[faceNormal]\n\n      if (center.sub(v1).dot(n) > circle.radius) {\n        return\n      }\n\n      manifold.contactCount = 1\n      manifold.normal = n.rotate(polygonBody.orientation).neg()\n      manifold.contacts[0] = circleBody.position.add(manifold.normal.mult(circle.radius))\n    }\n  }\n}\n\nexport class CollisionPolygonCircle implements CollisionHandler {\n  handler: CollisionCirclePolygon\n  constructor() {\n    this.handler = new CollisionCirclePolygon()\n  }\n\n  handleCollision(manifold: Manifold, polygon: Body, circle: Body) {\n    this.handler.handleCollision(manifold, circle, polygon)\n    manifold.normal = manifold.normal.neg()\n  }\n}","import { CollisionHandler } from \"./CollisionHandler\";\nimport { Manifold } from \"./collisions\";\nimport { Polygon } from \"./shapes\";\nimport { Body } from \"./body\"\nimport { Vector } from \"./vector\";\n\nconst BIAS_RELATIVE = 0.95\nconst BIAS_ABSOLUTE = 0.01\n\nfunction gt(a: number, b: number) {\n  return a >= b * BIAS_RELATIVE + a * BIAS_ABSOLUTE\n}\n\nexport class CollisionPolygonPolygon implements CollisionHandler {\n  handleCollision(manifold: Manifold, a: Body, b: Body) {\n    const shapeA = a.shape as Polygon\n    const shapeB = b.shape as Polygon\n    \n    manifold.contactCount = 0\n    \n    const faceA = [0]\n    let penetrationA = this.findAxisLeastPenetration(faceA, shapeA, a, shapeB, b)\n    if (penetrationA >= 0) {\n      return\n    }\n    \n    const faceB = [0]\n    let penetrationB = this.findAxisLeastPenetration(faceB, shapeB, b, shapeA, a)\n    if (penetrationB >= 0) {\n      return\n    }\n    \n    let referenceIndex\n    let flip\n    \n    let referencePoly: Polygon\n    let referenceBody: Body\n    let incidentPoly: Polygon\n    let incidentBody: Body\n    \n    if (gt(penetrationA, penetrationB)) {\n      referencePoly = shapeA\n      referenceBody = a\n      incidentPoly = shapeB\n      incidentBody = b\n      referenceIndex = faceA[0]\n      flip = false\n    } else {\n      referencePoly = shapeB\n      referenceBody = b\n      incidentPoly = shapeA\n      incidentBody = a\n      referenceIndex = faceB[0]\n      flip = true\n    }\n    \n    // World space incident face\n    let incidentFace = [new Vector(), new Vector()]\n    this.findIncidentFace(incidentFace, referencePoly, referenceBody, incidentPoly, incidentBody, referenceIndex)\n    \n    \n    \n    // Setup reference face vertices\n    let v1 = referencePoly.vertices[referenceIndex]\n    let v2 = referencePoly.vertices[(referenceIndex + 1) % referencePoly.vertexCount]\n    \n    // Transform to world space\n    v1 = v1.rotate(referenceBody.orientation).add(referenceBody.position)\n    v2 = v2.rotate(referenceBody.orientation).add(referenceBody.position)\n    \n    // Orthogonalize\n    let sidePlaneNormal = v2.sub(v1).unit()\n    let referenceFaceNormal = new Vector(sidePlaneNormal.y, -sidePlaneNormal.x)\n    \n    let refC = referenceFaceNormal.dot(v1)\n    let negSide = -sidePlaneNormal.dot(v1)\n    let posSide = sidePlaneNormal.dot(v2)\n    \n    \n    // Clip incident face to reference face side planes\n    let clip1 = this.clip(sidePlaneNormal.neg(), negSide, incidentFace)\n    if (clip1 < 2) {\n      // Due to floating point error, possible to not have required points\n      return\n    }\n    \n    let clip2 = this.clip(sidePlaneNormal, posSide, incidentFace)\n    if (clip2 < 2) {\n      // Due to floating point error, possible to not have required points\n      return\n    }\n    \n    // Flip\n    if (flip) {\n      manifold.normal = referenceFaceNormal\n    } else {\n      manifold.normal = referenceFaceNormal.neg()\n    }\n    \n    // Keep points behind reference face\n    let cp = 0\n    let penetration = referenceFaceNormal.dot(incidentFace[0]) - refC\n    if (penetration > 0) {\n      manifold.contacts[cp] = incidentFace[0]\n      manifold.penetration = penetration\n      cp++\n    } else {\n      manifold.penetration = 0\n    }\n    \n    penetration = referenceFaceNormal.dot(incidentFace[1]) - refC\n    if (penetration > 0) {\n      manifold.contacts[cp] = incidentFace[1]\n      manifold.penetration += penetration\n      cp++\n      \n      // Average penetration\n      manifold.penetration /= cp\n    }\n    \n    manifold.contactCount = cp\n  }\n  \n  findAxisLeastPenetration(faceIndex: number[], polyA: Polygon, bodyA: Body, polyB: Polygon, bodyB: Body) {\n    let bestDistance = -Number.MAX_VALUE\n    let bestIndex = 0\n    \n    for (let i = 0; i < polyA.vertexCount; i++) {\n      let normal = polyA.normals[i]\n      let worldNormal = normal.rotate(bodyA.orientation)\n      let bSpaceNormal = worldNormal.rotate(-bodyB.orientation)\n      \n      let support = polyB.getSupport(bSpaceNormal.neg())\n      \n      let bSpaceVertex = (polyA.vertices[i].rotate(bodyA.orientation)\n      .add(bodyA.position)\n      .sub(bodyB.position))\n      .rotate(-bodyB.orientation)\n      let dot = bSpaceNormal.dot(support.sub(bSpaceVertex))\n      \n      if (dot > bestDistance) {\n        bestDistance = dot\n        bestIndex = i\n      }\n    }\n    \n    faceIndex[0] = bestIndex\n    return bestDistance\n  }\n  \n  findIncidentFace(v: Vector[], refPoly: Polygon, refBody: Body, incPoly: Polygon, incBody: Body, referenceIndex: number) {\n    let referenceNormal = refPoly.normals[referenceIndex]\n    \n    // Calculate normal in incident's frame of reference\n    // Rotate to world space and then into incident space\n    referenceNormal = referenceNormal.rotate(refBody.orientation).rotate(-incBody.orientation)\n    \n    // Find most anti-normal face on incident polygon\n    let incidentFace = 0\n    let minDot = Number.MAX_VALUE\n    \n    for (let i = 0; i < incPoly.vertexCount; i++) {\n      let dot = referenceNormal.dot(incPoly.normals[i])\n      if (dot < minDot) {\n        minDot = dot\n        incidentFace = i\n      }\n    }\n    \n    // Assign face vertices for incidentFace\n    v[0] = incPoly.vertices[incidentFace].rotate(incBody.orientation).add(incBody.position)\n    incidentFace = (incidentFace + 1) % incPoly.vertexCount\n    v[1] = incPoly.vertices[incidentFace].rotate(incBody.orientation).add(incBody.position)\n  }\n  \n  clip(n: Vector, c: number, face: Vector[]) {\n    \n    let sp = 0\n    const out = [\n      face[0],\n      face[1]\n    ]\n    \n    // Retrieve distances from each endpoint to the line\n    let d1 = n.dot(face[0]) - c\n    let d2 = n.dot(face[1]) - c\n    \n    // If negative (behind plane) clip\n    if (d1 <= 0) {\n      out[sp] = face[0]\n      sp += 1\n    }\n    \n    if (d2 <= 0) {\n      out[sp] = face[1]\n      sp += 1\n    }\n    \n    // If the points are on different sides of the plane\n    if (d1 * d2 < 0) {\n      let a = d1 / (d1 - d2)\n      out[sp] = face[1].sub(face[0]).mult(a).add(face[0])\n      sp += 1\n    }\n    \n    face[0] = out[0]\n    face[1] = out[1]\n    \n    if (sp == 3) {\n      throw \"ClipError: sp == 3\"\n    }\n    \n    return sp\n  }\n}","import { Vector } from \"./vector\"\nimport { Body } from \"./body\"\nimport { SHAPE_COUNT } from \"./shapes\"\nimport { CollisionHandler } from \"./CollisionHandler\";\nimport { CollisionCircleCircle } from \"./collision_circle_circle\";\nimport { CollisionPolygonCircle, CollisionCirclePolygon } from \"./collision_circle_polygon\";\nimport { CollisionPolygonPolygon } from \"./collision_polygon_polygon\";\n\nconst CR: (CollisionHandler | null)[] = [\n  null, null, null,\n  null, new CollisionCircleCircle(), new CollisionCirclePolygon(),\n  null, new CollisionPolygonCircle(), new CollisionPolygonPolygon()\n]\n\nconst min = Math.min\nconst max = Math.max\n\nconst PENETRATION_ALLOWANCE = 0.05\nconst PENETRATION_CORRECTION = 0.4\n\nexport class Manifold {\n  a: Body\n  b: Body\n  penetration: number\n  normal: Vector\n  contacts: Vector[]\n  contactCount: number\n  e: number\n  df: number\n  sf: number\n\n  constructor(a: Body, b: Body) {\n    this.a = a\n    this.b = b\n    this.penetration = 0\n    this.normal = new Vector()\n    this.contacts = []\n    this.contactCount = 0\n    this.e = 0\n    this.df = 0\n    this.sf = 0\n  }\n  \n  solve() {\n    let aShape = this.a.shape.type\n    let bShape = this.b.shape.type\n    \n    let handler = CR[aShape * SHAPE_COUNT + bShape]\n    if (handler !== null) {\n      handler.handleCollision(this, this.a, this.b)\n    } else {\n      throw new Error(`No handler for types ${aShape} and ${ bShape }`)\n    }\n  }\n  \n  initialize() {\n    this.e = min(this.a.restitution, this.b.restitution)\n    for (let i = 0; i < this.contacts.length; i++) {\n      // calculate radii from center of mass to contact\n      let ra = this.contacts[i].sub(this.a.position)\n      let rb = this.contacts[i].sub(this.b.position)\n      \n      let rv = this.b.velocity.add(rb.scalarCross(this.b.angularVelocity))\n        .sub(this.a.velocity).sub(ra.scalarCross(this.a.angularVelocity))\n      \n      // GRAVITY NO BOUNCE\n      if (rv.lengthSquared() < new Vector(0, 4).mult(1 / 30).lengthSquared() + 0.0001) {\n        this.e = 0\n      }\n    }\n  }\n  \n  applyImpulse() {\n    let a = this.a\n    let b = this.b\n    \n    if (a.invMass === 0 && b.invMass === 0) {\n      print(\"here\")\n      a.velocity = new Vector()\n      b.velocity = new Vector()\n    }\n    \n    for (let i = 0; i < this.contacts.length; i++) {\n      let ra = this.contacts[i].sub(this.a.position)\n      let rb = this.contacts[i].sub(this.b.position)\n      \n      let rv = this.b.velocity.add(rb.scalarCross(this.b.angularVelocity))\n        .sub(this.a.velocity).sub(ra.scalarCross(this.a.angularVelocity))\n      \n      let contactVelocity = rv.dot(this.normal)\n      \n      if (contactVelocity > 0) {\n        return\n      }\n        \n      let raCrossN = ra.cross(this.normal)\n      let rbCrossN = rb.cross(this.normal)\n      let invMassSum = a.invMass + b.invMass +\n        (raCrossN * raCrossN) * a.invInertia +\n        (rbCrossN * rbCrossN) * b.invInertia\n      \n      // Calculate impulse scalar\n      let j = -(1.0 + this.e) * contactVelocity\n      j /= invMassSum\n      j /= this.contacts.length\n        \n      // Apply impulse\n      let impulse = this.normal.mult(j)\n      a.applyImpulse(impulse.neg(), ra)\n      b.applyImpulse(impulse, rb)\n    }\n  }\n    \n  positionalCorrection() {\n    let correction = max(this.penetration - PENETRATION_ALLOWANCE, 0) /\n        (this.a.invMass + this.b.invMass) * PENETRATION_CORRECTION\n    \n    this.a.position = this.a.position.add(this.normal.mult(-this.a.invMass * correction))\n    this.b.position = this.b.position.add(this.normal.mult(this.b.invMass * correction))\n  }\n}\n","import { Vector } from \"./vector\"\nimport { Body } from \"./body\"\nimport { Shape, Circle, Polygon } from \"./shapes\"\nimport { Manifold } from \"./collisions\"\nimport p5 = require(\"p5\");\n\nexport const sketch = (p: p5) => {\n  \n  let fps = 60\n  let dt = 1 / fps\n  let frameStart = 0\n  let accumulator = 0\n  \n  let bodies: Body[] = []\n  \n  const gravity = new Vector(0, 100)\n  \n  let mouseBody\n  \n  function testScene() {\n    // for (let i = 100; i < width; i += 100) {\n    mouseBody = new Body(Polygon.rect(60, 60))\n    // mouseBody = new Body(new Circle(30))\n    mouseBody.position = new Vector(0, p.height / 2)\n    mouseBody.applyImpulse(new Vector(0, 10), new Vector(0, 0))\n    // mouseBody.orientation = PI / 4\n    bodies.push(mouseBody)\n    // }\n    \n    let circle2 = new Body(Polygon.rect(p.width, 50), 0)\n    circle2.position = new Vector(p.width / 2, p.height / 2 + 200)\n    \n    bodies.push(circle2)\n    \n  }\n  \n  function randomScene() {\n    const width = p.width\n    const height = p.height\n    const random = p.random\n\n    let wall = new Body(Polygon.rect(width, 50), 0)\n    wall.position = new Vector(width / 2, height - 25)\n    bodies.push(wall)\n    \n    wall = new Body(Polygon.rect(width, 50), 0)\n    wall.position = new Vector(width / 2, 25)\n    bodies.push(wall)\n    \n    wall = new Body(Polygon.rect(50, height), 0)\n    wall.position = new Vector(25, height / 2)\n    bodies.push(wall)\n    \n    wall = new Body(Polygon.rect(50, height), 0)\n    wall.position = new Vector(width - 25, height / 2)\n    bodies.push(wall)\n    \n    for (let i = 0; i < 20; i++) {\n      let position = new Vector(random(100, width - 200), random(100, height - 200))\n      \n      let shape: Shape\n      let r = random(2) | 0\n      if (r == 0) {\n        shape = new Circle(random(25, 50))\n      } else {\n        shape = Polygon.rect(random(50, 100), random(50, 100))\n      }\n      \n      let body = new Body(shape)\n      body.position = position\n      // body.orientation = random(-PI, PI)\n      \n      let velocity = new Vector(random(-80, 80), random(-80, 80))\n      body.velocity = velocity\n      \n      bodies.push(body)\n    }\n  }\n  \n  p.setup = function() {\n    p.ellipseMode(p.RADIUS)\n    p.createCanvas(p.windowWidth, p.windowHeight);\n    p.frameRate(fps)\n    \n    // testScene()\n    randomScene()\n  }\n  \n  p.draw = function() {\n    p.background(220)\n    \n    let currentTime = p.millis() / 1000\n    accumulator += currentTime - frameStart\n    frameStart = currentTime\n    \n    while (accumulator > dt) {\n      updatePhysics(dt)\n      accumulator -= dt\n    }\n    \n    bodies.forEach(body => {\n      body.draw(p)\n    })\n  }\n  \n  let springBody: Body | null = null\n  let springPos: Vector | null = null\n  \n  function updatePhysics(dt: number) {\n    // Generate new collision info\n    let contacts: Manifold[] = []\n    for (let i = 0; i < bodies.length; i++) {\n      let a = bodies[i]\n      \n      for (let j = i + 1; j < bodies.length; j++) {\n        let b = bodies[j]\n        \n        if (a.invMass == 0 && b.invMass == 0) {\n          continue\n        }\n        \n        let manifold = new Manifold(a, b)\n        manifold.solve()\n        if (manifold.contactCount > 0) {\n          contacts.push(manifold)\n        }\n      }\n    }\n    \n    if (p.mouseIsPressed) {\n      let mouse = new Vector(p.mouseX, p.mouseY)\n      if (springBody == null) {\n        for (let i = 0; i < bodies.length; i++) {\n          let body = bodies[i]\n          if (body.isPointInside(mouse)) {\n            springBody = body\n            springPos = mouse.sub(body.position).rotate(-body.orientation)\n            break\n          }\n        }\n      }\n    } else {\n      springBody = null\n    }\n    \n    if (springBody !== null && springPos !== null) {\n      let pos = springBody.position\n      let a = springPos.rotate(springBody.orientation).add(springBody.position)\n      let delta = new Vector(p.mouseX, p.mouseY).sub(a)\n      let force = delta.mult(100)\n      let damping = springBody.velocity.mult(50)\n      springBody.applyImpulse(force.sub(damping), a.sub(springBody.position))\n      p.push()\n      p.noFill()\n      p.stroke(\"#FF0\")\n      p.line(a.x, a.y, p.mouseX, p.mouseY)\n      p.ellipse(a.x, a.y, 10)\n      p.pop()\n    }\n    \n    // Integrate forces\n    for (let i = 0; i < bodies.length; i++) {\n      let body = bodies[i]\n      if (body.invMass === 0) {\n        continue\n      }\n      \n      let dts = dt * 0.5\n      \n      body.velocity = body.velocity.add(body.force.mult(body.invMass * dts))\n      body.velocity = body.velocity.add(gravity.mult(dts))\n      body.angularVelocity += body.torque * body.invInertia * dts\n    }\n    \n    // Initialize collision\n    for (let i = 0; i < contacts.length; i++) {\n      contacts[i].initialize()\n    }\n    \n    // Solve collision\n    for(let j = 0; j < 10; j++) {\n      for (let i = 0; i < contacts.length; i++) {\n        contacts[i].applyImpulse()\n      }\n    }\n    \n    // Integrate velocities\n    for (let i = 0; i < bodies.length; i++) {\n      let body = bodies[i]\n      if (body.invMass === 0.0) {\n        continue\n      }\n      \n      body.position = body.position.add(body.velocity.mult(dt))\n      body.orientation += body.angularVelocity * dt\n      \n      let dts = dt * 0.5\n      \n      body.velocity = body.velocity.add(body.force.mult(body.invMass * dts))\n      body.velocity = body.velocity.add(gravity.mult(dts))\n      body.angularVelocity += body.torque * body.invInertia * dts\n    }\n    \n    // Correct Positions\n    for (let i = 0; i < contacts.length; i++) {\n      contacts[i].positionalCorrection();\n    }\n    \n    // Clear all forces\n    for (let i = 0; i < bodies.length; i++) {\n      let body = bodies[i]\n      body.force.x = 0\n      body.force.y = 0\n      body.torque = 0\n    }\n  }\n}","var OVERLAY_ID = '__parcel__error__overlay__';\n\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n\n  module.bundle.hotData = null;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets, assetsToAccept;\n\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = process.env.HMR_HOSTNAME || location.hostname;\n  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + ':' + process.env.HMR_PORT + '/');\n  ws.onmessage = function(event) {\n    checkedAssets = {};\n    assetsToAccept = [];\n\n    var data = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      var handled = false;\n      data.assets.forEach(function(asset) {\n        if (!asset.isNew) {\n          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);\n          if (didAccept) {\n            handled = true;\n          }\n        }\n      });\n\n      // Enable HMR for CSS by default.\n      handled = handled || data.assets.every(function(asset) {\n        return asset.type === 'css' && asset.generated.js;\n      });\n\n      if (handled) {\n        console.clear();\n\n        data.assets.forEach(function (asset) {\n          hmrApply(global.parcelRequire, asset);\n        });\n\n        assetsToAccept.forEach(function (v) {\n          hmrAcceptRun(v[0], v[1]);\n        });\n      } else {\n        window.location.reload();\n      }\n    }\n\n    if (data.type === 'reload') {\n      ws.close();\n      ws.onclose = function () {\n        location.reload();\n      }\n    }\n\n    if (data.type === 'error-resolved') {\n      console.log('[parcel] ✨ Error resolved');\n\n      removeErrorOverlay();\n    }\n\n    if (data.type === 'error') {\n      console.error('[parcel] 🚨  ' + data.error.message + '\\n' + data.error.stack);\n\n      removeErrorOverlay();\n\n      var overlay = createErrorOverlay(data);\n      document.body.appendChild(overlay);\n    }\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n  }\n}\n\nfunction createErrorOverlay(data) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n\n  // html encode message and stack trace\n  var message = document.createElement('div');\n  var stackTrace = document.createElement('pre');\n  message.innerText = data.error.message;\n  stackTrace.innerText = data.error.stack;\n\n  overlay.innerHTML = (\n    '<div style=\"background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;\">' +\n      '<span style=\"background: red; padding: 2px 4px; border-radius: 2px;\">ERROR</span>' +\n      '<span style=\"top: 2px; margin-left: 5px; position: relative;\">🚨</span>' +\n      '<div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">' + message.innerHTML + '</div>' +\n      '<pre>' + stackTrace.innerHTML + '</pre>' +\n    '</div>'\n  );\n\n  return overlay;\n\n}\n\nfunction getParents(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || (Array.isArray(dep) && dep[dep.length - 1] === id)) {\n        parents.push(k);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction hmrApply(bundle, asset) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (modules[asset.id] || !bundle.parent) {\n    var fn = new Function('require', 'module', 'exports', asset.generated.js);\n    asset.isNew = !modules[asset.id];\n    modules[asset.id] = [fn, asset.deps];\n  } else if (bundle.parent) {\n    hmrApply(bundle.parent, asset);\n  }\n}\n\nfunction hmrAcceptCheck(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (!modules[id] && bundle.parent) {\n    return hmrAcceptCheck(bundle.parent, id);\n  }\n\n  if (checkedAssets[id]) {\n    return;\n  }\n  checkedAssets[id] = true;\n\n  var cached = bundle.cache[id];\n\n  assetsToAccept.push([bundle, id]);\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n\n  return getParents(global.parcelRequire, id).some(function (id) {\n    return hmrAcceptCheck(global.parcelRequire, id)\n  });\n}\n\nfunction hmrAcceptRun(bundle, id) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n  if (cached) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n\n  cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      cb();\n    });\n    return true;\n  }\n}\n"]}